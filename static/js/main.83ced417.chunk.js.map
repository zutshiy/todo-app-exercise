{"version":3,"sources":["select-all-button/SelectAllButton.tsx","entry-input/EntryInput.tsx","entry-box/EntryBox.tsx","item-check-box/ItemCheckBox.tsx","list-item-input/ListItemInput.tsx","remove-button/RemoveButton.tsx","list-item-box/ListItemBox.tsx","meta-data-box/MetaDataBox.tsx","todo-box/ToDoBox.tsx","ListService.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SelectAllButton","isToShow","isAllComplete","onBtnClick","className","onClick","handleKeyPress","e","onEnter","key","EntryInput","userInput","onAction","placeholder","type","value","onChange","target","onKeyPress","EntryBox","isEmpty","onItemEnter","onSelectAll","useState","setUserInput","setIsAllComplete","val","ItemCheckBox","checked","onCheck","currentTarget","ListItemInput","itemValue","editable","onEdit","onBlur","readOnly","onDoubleClick","RemoveButton","hovered","ListItemBox","listItem","updateItem","updateItemStatus","removeItem","setEditable","setHovered","hide","onMouseEnter","onMouseLeave","completed","newVal","isStart","trimEnd","MetaDataBox","listItems","onClearClick","updateView","selectedFilter","setSelectedFilter","onButtonClick","leftItems","filter","item","length","selectedClassName","isAnyCompleted","find","ToDoBox","setListItems","view","setView","updateState","updateItemValue","index","newList","updateItemValueInList","isComplete","updateItemStatusInList","useCallback","newItem","addItemToList","forEach","updateAllItemsStatusInList","map","indexOf","removeItemFromList","clearCompletedFromList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83ced417.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SelectAllButton.scss\";\n\nconst SelectAllButton = ({\n  isToShow,\n  isAllComplete,\n  onBtnClick,\n}: {\n  isToShow: boolean;\n  isAllComplete: boolean;\n  onBtnClick: () => void;\n}) => {\n  let className = \"select-all-button\";\n  className += !isToShow ? \" hidden\" : \"\";\n  className += isAllComplete ? \" clicked\" : \"\";\n\n  return (\n    <button className={className} onClick={onBtnClick}>\n      {<i className=\"fa fa-chevron-down\" />}\n    </button>\n  );\n};\n\nexport default SelectAllButton;\n","import React from \"react\";\nimport \"./EntryInput.scss\";\n\nconst EntryInput = ({\n  userInput,\n  onAction,\n  onEnter,\n}: {\n  userInput: string;\n  onAction: (val: string) => void;\n  onEnter: () => void;\n}) => {\n  return (\n    <input\n      placeholder=\"What needs to be done?\"\n      className=\"input-item entry-input\"\n      type=\"text\"\n      value={userInput}\n      onChange={(e) => onAction(e.target.value)}\n      onKeyPress={(e) => handleKeyPress(e, onEnter)}\n    />\n  );\n};\n\nconst handleKeyPress = (\n  e: React.KeyboardEvent<HTMLInputElement>,\n  onEnter: () => void\n) => {\n  if (e.key === \"Enter\") {\n    onEnter();\n  }\n};\n\nexport default EntryInput;\n","import React, {useState} from 'react';\nimport SelectAllButton from '../select-all-button/SelectAllButton';\nimport EntryInput from '../entry-input/EntryInput';\n\nconst EntryBox = ({isEmpty, onItemEnter, onSelectAll}: { isEmpty: boolean, onItemEnter: (val: string) => void, onSelectAll: (isComplete: boolean) => void }) =>\n{\n    const [userInput, setUserInput] = useState<string>('');\n    const [isAllComplete, setIsAllComplete] = useState<boolean>(false);\n\n    const updateUserInput = (val: string) => {\n        setUserInput(val);\n    }\n\n    const addUserInput = () => {\n        onItemEnter(userInput);\n        setUserInput('');\n    }\n\n    const updateIsAllComplete = () => {\n        setIsAllComplete(!isAllComplete);\n        onSelectAll(!isAllComplete);\n    }\n\n    return (\n      <div className=\"input-container\">\n        <SelectAllButton\n          isToShow={!isEmpty}\n          isAllComplete={isAllComplete}\n          onBtnClick={updateIsAllComplete}\n        />\n        <EntryInput\n          userInput={userInput}\n          onAction={updateUserInput}\n          onEnter={addUserInput}\n        />\n      </div>\n    );\n}\n\nexport default EntryBox;\n","import React, { ChangeEvent } from \"react\";\n\nconst ItemCheckBox = ({\n  checked,\n  onCheck,\n}: {\n  checked: boolean;\n  onCheck: (e: ChangeEvent) => void;\n}) => {\n  return (\n    <input type=\"checkbox\" checked={checked} onChange={(e) => onCheck(e)} />\n  );\n};\n\nexport default ItemCheckBox;\n","import React from \"react\";\nimport \"./ListItemInput.scss\";\n\nconst ListItemInput = ({\n  itemValue,\n  checked,\n  editable,\n  onChange,\n  onEdit,\n}: {\n  itemValue: string;\n  checked: boolean;\n  editable: boolean;\n  onChange: (newVal: string) => void;\n  onEdit: (isStart: boolean, newVal?: string) => void;\n}) => {\n  let className = \"input-item list-item-input\";\n  className += checked ? \" checked\" : \"\";\n  className += editable ? \" editable\" : \"\";\n\n  return (\n    <div className=\"list-item-input-container\">\n      <input\n        onBlur={() => onEdit(false)}\n        value={itemValue}\n        readOnly={!editable}\n        className={className}\n        type=\"text\"\n        onChange={(e) => onChange(e.currentTarget.value)}\n        onDoubleClick={() => onEdit(true)}\n        onKeyPress={(e) => handleKeyPress(e, onEdit)}\n      />\n    </div>\n  );\n};\n\nconst handleKeyPress = (\n  e: React.KeyboardEvent<HTMLInputElement>,\n  onEnter: (isStart: boolean, newVal?: string) => void\n) => {\n  if (e.key === \"Enter\") {\n    onEnter(false, e.currentTarget.value);\n  }\n};\n\nexport default ListItemInput;\n","import React from \"react\";\nimport \"./RemoveButton.scss\";\n\nconst RemoveButton = ({\n  onBtnClick,\n  hovered,\n}: {\n  onBtnClick: () => void;\n  hovered: boolean;\n}) => {\n  let className = \"remove-button\";\n  className += !hovered ? \" hidden\" : \"\";\n  return (\n    <button className={className} onClick={onBtnClick}>\n      <i className=\"fa fa-times-circle\" />\n    </button>\n  );\n};\n\nexport default RemoveButton;\n","import React, { ChangeEvent, useState } from \"react\";\nimport ItemCheckBox from \"../item-check-box/ItemCheckBox\";\nimport ListItemInput from \"../list-item-input/ListItemInput\";\nimport { ListItem } from \"../models/ListItem\";\nimport RemoveButton from \"../remove-button/RemoveButton\";\n\nconst ListItemBox = ({\n  listItem,\n  updateItem,\n  updateItemStatus,\n  removeItem,\n}: {\n  listItem: ListItem;\n  updateItem: (newVal: string) => void;\n  updateItemStatus: (isCompleted: boolean) => void;\n  removeItem: () => void;\n}) => {\n  const [editable, setEditable] = useState<boolean>(false);\n  const [hovered, setHovered] = useState<boolean>(false);\n\n  const onEdit = (isStart: boolean, newVal?: string) => {\n    if (isStart) {\n      setEditable(true);\n    } else {\n      if (newVal?.trimEnd() === \"\") {\n        removeItem();\n      }\n      setEditable(false);\n    }\n  };\n\n  const updateItemVal = (newVal: string) => updateItem(newVal);\n  const onCheck = (e: ChangeEvent) =>\n    updateItemStatus((e.target as HTMLInputElement).checked);\n\n  return (\n    <div\n      className={\"input-container\" + (listItem.hide ? \" hidden-remove\" : \"\")}\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n    >\n      <ItemCheckBox checked={listItem.completed} onCheck={onCheck} />\n      <ListItemInput\n        itemValue={listItem.value}\n        checked={listItem.completed}\n        onChange={updateItemVal}\n        editable={editable}\n        onEdit={onEdit}\n      />\n      <RemoveButton hovered={hovered} onBtnClick={removeItem} />\n    </div>\n  );\n};\n\nexport default ListItemBox;\n","import React, { useState } from \"react\";\nimport \"./MetaDataBox.scss\";\nimport { ListItem } from \"../models/ListItem\";\n\nconst MetaDataBox = ({\n  listItems,\n  onClearClick,\n  updateView,\n}: {\n  listItems: ListItem[];\n  onClearClick: () => void;\n  updateView: (val: \"All\" | \"Active\" | \"Completed\") => void;\n}) => {\n  const [selectedFilter, setSelectedFilter] = useState<string>(\"All\");\n  const onButtonClick = (val: \"All\" | \"Active\" | \"Completed\") => {\n    setSelectedFilter(val);\n    updateView(val);\n  };\n  const leftItems = listItems.filter((item) => !item.completed).length;\n  const selectedClassName = (val: string) =>\n    selectedFilter === val ? \"selected-button\" : \"\";\n\n  let isAnyCompleted = listItems.find((item) => item.completed);\n  return (\n    <div>\n      <div className=\"meta-bg-container\">\n        <div className=\"meta-bg\" />\n        <div className=\"meta-bg\" />\n      </div>\n      <div className=\"input-container meta-data-box\">\n        <span>{leftItems} items left</span>\n        <div className=\"meta-buttons\">\n          <button\n            className={selectedClassName(\"All\")}\n            onClick={() => onButtonClick(\"All\")}\n          >\n            All\n          </button>\n          <button\n            className={selectedClassName(\"Active\")}\n            onClick={() => onButtonClick(\"Active\")}\n          >\n            Active\n          </button>\n          <button\n            className={selectedClassName(\"Completed\")}\n            onClick={() => onButtonClick(\"Completed\")}\n          >\n            Completed\n          </button>\n        </div>\n        <button\n          className={\"clear-button\" + (!isAnyCompleted ? \" hidden\" : \"\")}\n          onClick={onClearClick}\n        >\n          Clear Completed\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default MetaDataBox;\n","import React, { useCallback, useState } from \"react\";\nimport \"./ToDoBox.scss\";\nimport EntryBox from \"../entry-box/EntryBox\";\nimport ListItemBox from \"../list-item-box/ListItemBox\";\nimport { ListItem } from \"../models/ListItem\";\nimport {\n  addItemToList,\n  removeItemFromList,\n  updateAllItemsStatusInList,\n  updateItemValueInList,\n  updateItemStatusInList,\n  clearCompletedFromList,\n} from \"../ListService\";\nimport MetaDataBox from \"../meta-data-box/MetaDataBox\";\n\nconst ToDoBox = () => {\n  const [listItems, setListItems] = useState<ListItem[]>([]);\n  const [view, setView] = useState<\"All\" | \"Active\" | \"Completed\">(\"All\");\n  const updateState = (listItems: ListItem[] | null) =>\n    listItems && setListItems(listItems);\n\n  const addToList = (newItem: string) =>\n    updateState(addItemToList(listItems, newItem));\n  const updateItemValue = (index: number, newVal: string) =>\n    updateState(updateItemValueInList(listItems, index, newVal));\n  const updateItemStatus = (index: number, isComplete: boolean) =>\n    updateState(updateItemStatusInList(listItems, index, isComplete));\n  const updateAllItemsStatus = (isComplete: boolean) =>\n    updateState(updateAllItemsStatusInList(listItems, isComplete));\n  const removeItem = (index: number) =>\n    updateState(removeItemFromList(listItems, index));\n  const clearCompleted = () => updateState(clearCompletedFromList(listItems));\n  const updateView = (val: \"All\" | \"Active\" | \"Completed\") => setView(val);\n\n  const isToShow = useCallback(\n    (item: ListItem) =>\n      view === \"Active\"\n        ? !item.completed\n        : view === \"Completed\"\n        ? item.completed\n        : view === \"All\",\n    [view]\n  );\n\n  const createListItem = () => {\n    return (\n      <ul>\n        {listItems.filter(isToShow).map((item, index) => {\n          const updateValueAtIndex = (newVal: string) =>\n            updateItemValue(index, newVal);\n          const updateStatusAtIndex = (newVal: boolean) =>\n            updateItemStatus(index, newVal);\n          const removeItemAtIndex = () => removeItem(index);\n          return (\n            <li key={index}>\n              <ListItemBox\n                listItem={item}\n                updateItem={updateValueAtIndex}\n                updateItemStatus={updateStatusAtIndex}\n                removeItem={removeItemAtIndex}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <h1>todos</h1>\n      <div className=\"todo-box\">\n        <EntryBox\n          isEmpty={listItems.length === 0}\n          onItemEnter={addToList}\n          onSelectAll={updateAllItemsStatus}\n        />\n        {createListItem()}\n        {listItems.length !== 0 && (\n          <MetaDataBox\n            updateView={updateView}\n            listItems={listItems}\n            onClearClick={clearCompleted}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ToDoBox;\n","import { ListItem } from \"./models/ListItem\";\n\nexport const addItemToList = (\n  listItems: ListItem[],\n  newItem: string\n): ListItem[] | null => {\n  if (newItem && newItem !== \"\") {\n    return [...listItems, { value: newItem, completed: false }];\n  }\n  return null;\n};\n\nexport const updateItemValueInList = (\n  listItems: ListItem[],\n  index: number,\n  newVal: string\n): ListItem[] | null => {\n  let newList = [...listItems];\n  if (newList[index].value !== newVal) {\n    newList[index].value = newVal;\n    return newList;\n  }\n\n  return null;\n};\n\nexport const updateItemStatusInList = (\n  listItems: ListItem[],\n  index: number,\n  isComplete: boolean\n): ListItem[] => {\n  const newList = [...listItems];\n  newList[index].completed = isComplete;\n  return newList;\n};\n\nexport const updateAllItemsStatusInList = (\n  listItems: ListItem[],\n  isComplete: boolean\n): ListItem[] => {\n  const newList = [...listItems];\n  newList.forEach((item) => (item.completed = isComplete));\n  return newList;\n};\n\nexport const removeItemFromList = (\n  listItems: ListItem[],\n  index: number\n): ListItem[] => {\n  return listItems.filter((item) => listItems.indexOf(item) !== index);\n};\n\nexport const clearCompletedFromList = (listItems: ListItem[]): ListItem[] => {\n  return listItems.filter((item) => !item.completed);\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport ToDoBox from \"./todo-box/ToDoBox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoBox />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}