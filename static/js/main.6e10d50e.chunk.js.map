{"version":3,"sources":["select-all-button/SelectAllButton.tsx","entry-input/EntryInput.tsx","entry-box/EntryBox.tsx","item-check-box/ItemCheckBox.tsx","list-item-input/ListItemInput.tsx","remove-button/RemoveButton.tsx","list-item-box/ListItemBox.tsx","meta-data-box/MetaDataBox.tsx","todo-box/ToDoBox.tsx","ListService.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SelectAllButton","isToShow","isAllComplete","onBtnClick","className","onClick","handleKeyPress","e","onEnter","key","EntryInput","userInput","onAction","placeholder","type","value","onChange","target","onKeyPress","EntryBox","isEmpty","onItemEnter","onSelectAll","useState","setUserInput","setIsAllComplete","val","ItemCheckBox","checked","onCheck","currentTarget","ListItemInput","itemValue","editable","onEdit","onOutsideClick","display","readOnly","onDoubleClick","RemoveButton","hovered","_isMounted","ListItemBox","listItem","updateItem","updateItemStatus","removeItem","setEditable","setHovered","useEffect","hide","onMouseEnter","onMouseLeave","completed","newVal","isStart","trimEnd","MetaDataBox","listItems","onClearClick","selectedFilter","setSelectedFilter","leftItems","filter","item","length","isAnyCompleted","find","map","index","onButtonClick","ToDoBox","setListItems","updateState","updateItemValue","newList","updateItemValueInList","isComplete","updateItemStatusInList","newItem","addItemToList","forEach","updateAllItemsStatusInList","indexOf","removeItemFromList","hideFilteredItemsFromList","clearCompletedFromList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e10d50e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SelectAllButton.scss'\r\n\r\nconst SelectAllButton = ({isToShow, isAllComplete, onBtnClick}: { isToShow: boolean, isAllComplete: boolean, onBtnClick: () => void }) =>\r\n{\r\n    let className = 'select-all-button';\r\n    className += !isToShow ? ' hidden' : '';\r\n    className += isAllComplete ? ' clicked' : '';\r\n\r\n    return (\r\n        <button className={className} onClick={onBtnClick}>\r\n            <i className='fa fa-chevron-down'/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SelectAllButton;\r\n","import React from 'react';\r\nimport './EntryInput.scss';\r\n\r\nconst EntryInput = ({userInput, onAction, onEnter}: { userInput: string, onAction: (val: string) => void, onEnter: () => void }) =>\r\n{\r\n    return (\r\n        <input placeholder=\"What needs to be done?\" className='input-item entry-input' type='text' value={userInput} onChange={e => onAction(e.target.value)}\r\n               onKeyPress={e => handleKeyPress(e, onEnter)}/>\r\n    )\r\n}\r\n\r\nconst handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>, onEnter: () => void) =>\r\n{\r\n    if (e.key === 'Enter')\r\n    {\r\n        onEnter();\r\n    }\r\n}\r\n\r\n\r\nexport default EntryInput;\r\n","import React, {useState} from 'react';\r\nimport SelectAllButton from '../select-all-button/SelectAllButton';\r\nimport EntryInput from '../entry-input/EntryInput';\r\n\r\nconst EntryBox = ({isEmpty, onItemEnter, onSelectAll}: { isEmpty: boolean, onItemEnter: (val: string) => void, onSelectAll: (isComplete: boolean) => void }) =>\r\n{\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [isAllComplete, setIsAllComplete] = useState<boolean>(false);\r\n\r\n    const updateUserInput = (val: string) => {\r\n        setUserInput(val);\r\n    }\r\n\r\n    const addUserInput = () => {\r\n        onItemEnter(userInput);\r\n        setUserInput('');\r\n    }\r\n\r\n    const updateIsAllComplete = () => {\r\n        setIsAllComplete(!isAllComplete);\r\n        onSelectAll(!isAllComplete);\r\n    }\r\n\r\n    return (\r\n        <div className='input-container'>\r\n            <SelectAllButton isToShow={!isEmpty} isAllComplete={isAllComplete} onBtnClick={updateIsAllComplete}/>\r\n            <EntryInput userInput={userInput} onAction={updateUserInput} onEnter={addUserInput}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EntryBox;\r\n","import React, {ChangeEvent} from 'react';\r\n\r\nconst ItemCheckBox = ({checked, onCheck}: {checked: boolean, onCheck: (e: ChangeEvent) => void}) =>\r\n{\r\n    return (\r\n        <input type='checkbox' checked={checked} onChange={e => onCheck(e)}/>\r\n    )\r\n}\r\n\r\nexport default ItemCheckBox;\r\n","import React from 'react';\r\nimport OnOutsiceClick from 'react-outclick';\r\nimport './ListItemInput.scss';\r\n\r\n\r\nconst ListItemInput = ({itemValue, checked, editable, onChange, onEdit}: {\r\n    itemValue: string, checked: boolean, editable: boolean,\r\n    onChange: (newVal: string) => void,\r\n    onEdit: (isStart: boolean, newVal?: string ) => void\r\n}) =>\r\n{\r\n    let className = 'input-item list-item-input';\r\n    className += checked ? ' checked' : '';\r\n    className += editable ? ' editable' : '';\r\n\r\n    return (\r\n        <div className='list-item-input-container'>\r\n            <OnOutsiceClick onOutsideClick={() => onEdit(false)} display={'contents'}>\r\n                <input value={itemValue} readOnly={!editable} className={className} type='text'\r\n                       onChange={(e) => onChange(e.currentTarget.value)}\r\n                       onDoubleClick={() => onEdit(true)}\r\n                       onKeyPress={(e) => handleKeyPress(e, onEdit)}/>\r\n            </OnOutsiceClick>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>, onEnter: (isStart: boolean, newVal?: string) => void) =>\r\n{\r\n    if (e.key === 'Enter')\r\n    {\r\n        onEnter(false, e.currentTarget.value);\r\n    }\r\n}\r\n\r\nexport default ListItemInput;\r\n","import React from 'react';\r\nimport './RemoveButton.scss'\r\n\r\nconst RemoveButton = ({onBtnClick, hovered}: { onBtnClick: () => void, hovered: boolean }) =>\r\n{\r\n    let className = 'remove-button';\r\n    className += !hovered ? ' hidden' : '';\r\n    return (\r\n        <button className={className} onClick={onBtnClick}>\r\n            <i className='fa fa-times-circle'/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default RemoveButton;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport ItemCheckBox from '../item-check-box/ItemCheckBox';\r\nimport ListItemInput from '../list-item-input/ListItemInput';\r\nimport {ListItem} from '../models/ListItem';\r\nimport RemoveButton from '../remove-button/RemoveButton';\r\n\r\nlet _isMounted = true;\r\n\r\nconst ListItemBox = ({listItem, updateItem, updateItemStatus, removeItem}: {\r\n    listItem: ListItem, updateItem: (newVal: string) => void,\r\n    updateItemStatus: (isCompleted: boolean) => void,\r\n    removeItem: () => void\r\n}) =>\r\n{\r\n    const [editable, setEditable] = useState<boolean>(false);\r\n    const [hovered, setHovered] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        _isMounted = true;\r\n        return () => {\r\n            _isMounted = false;\r\n        }\r\n    });\r\n\r\n    const onEdit = (isStart: boolean, newVal?: string) =>\r\n    {\r\n        if(!_isMounted)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (isStart)\r\n        {\r\n            setEditable(true);\r\n        }\r\n        else\r\n        {\r\n            if (newVal?.trimEnd() === '')\r\n            {\r\n                removeItem();\r\n            }\r\n            setEditable(false);\r\n        }\r\n    };\r\n\r\n    const updateItemVal = (newVal: string) => (updateItem(newVal));\r\n    const onCheck = (e: ChangeEvent) => (updateItemStatus((e.target as HTMLInputElement).checked));\r\n\r\n    return (\r\n        <div className={'input-container' + (listItem.hide ? ' hidden-remove' : '')} onMouseEnter={() => setHovered(true)} onMouseLeave={() => setHovered(false)}>\r\n            <ItemCheckBox checked={listItem.completed} onCheck={onCheck}/>\r\n            <ListItemInput itemValue={listItem.value} checked={listItem.completed} onChange={updateItemVal} editable={editable} onEdit={onEdit}/>\r\n            <RemoveButton hovered={hovered} onBtnClick={removeItem}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItemBox;\r\n","import React, {useState} from 'react';\r\nimport './MetaDataBox.scss';\r\nimport {ListItem} from '../models/ListItem';\r\n\r\nconst MetaDataBox = ({listItems, onBtnClick, onClearClick}: { listItems: ListItem[], onBtnClick: (filter: string) => void, onClearClick: () => void }) =>\r\n{\r\n    const filters = ['All', 'Active', 'Completed'];\r\n    const [selectedFilter, setSelectedFilter] = useState<string>('All');\r\n    const onButtonClick = (val: string) =>\r\n    {\r\n        setSelectedFilter(val);\r\n        onBtnClick(val);\r\n    }\r\n    const leftItems = listItems.filter(item => !item.completed).length;\r\n    const selectedClassName = (val: string) => (selectedFilter === val ? 'selected-button' : '');\r\n\r\n    let isAnyCompleted = listItems.find(item => item.completed);\r\n    return (\r\n        <div>\r\n            <div className='meta-bg-container'>\r\n                <div className='meta-bg'/>\r\n                <div className='meta-bg'/>\r\n            </div>\r\n            <div className='input-container meta-data-box'>\r\n                <span>{leftItems} items left</span>\r\n                <div className='meta-buttons'>\r\n                    {\r\n                        filters.map((filter, index) => (\r\n                            <button key={index} className={selectedClassName(filter)} onClick={() => onButtonClick(filter)}>{filter}</button>))\r\n                    }\r\n                </div>\r\n                <button className={'clear-button' + (!isAnyCompleted ? ' hidden' : '')} onClick={onClearClick}>Clear Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MetaDataBox;\r\n","import React, {useState} from 'react';\r\nimport './ToDoBox.scss'\r\nimport EntryBox from '../entry-box/EntryBox';\r\nimport ListItemBox from '../list-item-box/ListItemBox';\r\nimport {ListItem} from '../models/ListItem';\r\nimport {\r\n    addItemToList,\r\n    removeItemFromList,\r\n    updateAllItemsStatusInList,\r\n    updateItemValueInList,\r\n    updateItemStatusInList,\r\n    clearCompletedFromList, hideFilteredItemsFromList\r\n} from '../ListService';\r\nimport MetaDataBox from '../meta-data-box/MetaDataBox';\r\n\r\nconst ToDoBox = () =>\r\n{\r\n    const [listItems, setListItems] = useState<ListItem[]>([]);\r\n    const updateState = (listItems: ListItem[] | null) => (listItems && setListItems(listItems));\r\n    // useEffect(() => console.log('List Items are: ', listItems));\r\n\r\n    const addToList = (newItem: string) => updateState(addItemToList(listItems, newItem));\r\n    const updateItemValue = (index: number, newVal: string) => updateState(updateItemValueInList(listItems, index, newVal));\r\n    const updateItemStatus = (index: number, isComplete: boolean) => updateState(updateItemStatusInList(listItems, index, isComplete));\r\n    const updateAllItemsStatus = (isComplete: boolean) => updateState(updateAllItemsStatusInList(listItems, isComplete));\r\n    const removeItem = (index: number) => updateState(removeItemFromList(listItems, index));\r\n    const hideFilteredItems = (filter: string) => (updateState(hideFilteredItemsFromList(listItems, filter)));\r\n    const clearCompleted = () => updateState(clearCompletedFromList(listItems));\r\n\r\n    const createListItem = () =>\r\n    {\r\n        return <ul>\r\n            {\r\n                listItems.map((item, index) =>\r\n                {\r\n                    const updateValueAtIndex = (newVal: string) => updateItemValue(index, newVal);\r\n                    const updateStatusAtIndex = (newVal: boolean) => updateItemStatus(index, newVal);\r\n                    const removeItemAtIndex = () => removeItem(index);\r\n                    return (\r\n                        <li key={index}><ListItemBox listItem={item}\r\n                                                     updateItem={updateValueAtIndex} updateItemStatus={updateStatusAtIndex} removeItem={removeItemAtIndex}/>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>todos</h1>\r\n            <div className='todo-box'>\r\n                <EntryBox isEmpty={listItems.length === 0} onItemEnter={addToList} onSelectAll={updateAllItemsStatus}/>\r\n                {createListItem()}\r\n                {listItems.length !== 0 && <MetaDataBox listItems={listItems} onBtnClick={hideFilteredItems} onClearClick={clearCompleted}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoBox;\r\n","import {ListItem} from './models/ListItem';\r\n\r\nexport const addItemToList = (listItems: ListItem[], newItem: string): ListItem[] | null =>\r\n{\r\n    if (newItem && newItem !== '')\r\n    {\r\n        return [...listItems, {value: newItem, completed: false}];\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const updateItemValueInList = (listItems: ListItem[], index: number, newVal: string): ListItem[] | null =>\r\n{\r\n    let newList = [...listItems];\r\n    if (newList[index].value !== newVal)\r\n    {\r\n        newList[index].value = newVal;\r\n        return newList;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const updateItemStatusInList = (listItems: ListItem[], index: number, isComplete: boolean): ListItem[] =>\r\n{\r\n    const newList = [...listItems];\r\n    newList[index].completed = isComplete;\r\n    return newList;\r\n}\r\n\r\nexport const updateAllItemsStatusInList = (listItems: ListItem[], isComplete: boolean): ListItem[] =>\r\n{\r\n    const newList = [...listItems];\r\n    newList.forEach(item => item.completed = isComplete);\r\n    return newList;\r\n}\r\n\r\nexport const removeItemFromList = (listItems: ListItem[], index: number): ListItem[] =>\r\n{\r\n    return listItems.filter(item => listItems.indexOf(item) !== index);\r\n}\r\n\r\nexport const hideFilteredItemsFromList = (listItems: ListItem[], filter: string): ListItem[] | null =>\r\n{\r\n    const newList = [...listItems];\r\n    newList.forEach(item => item.hide = false);\r\n    switch (filter)\r\n    {\r\n        case 'All':\r\n            return newList;\r\n        case 'Active':\r\n            newList.filter(item => item.completed).map(item => item.hide = true);\r\n            return newList;\r\n        case 'Completed':\r\n            newList.filter(item => !item.completed).map(item => item.hide = true);\r\n            return newList;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport const clearCompletedFromList = (listItems: ListItem[]): ListItem[] =>\r\n{\r\n    return listItems.filter(item => !item.completed);\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport ToDoBox from './todo-box/ToDoBox';\n\nfunction App()\n{\n    return (\n        <div className=\"App\">\n            <ToDoBox/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}